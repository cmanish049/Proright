<?php

class Customer extends Admin_Controller
{
    public function __construct()
    {
        parent::__construct();

        $module = 'customer';
        $this->auth->is_authorized($module);
        $this->load->model(array('customer_model'));

        $this->data['limit'] = 10;
        $this->data['module'] = $this->auth->get_module($module);
        $this->data['page_title'] = $this->data['module']['module_plural_label'];
        $this->data['index_url'] = admin_url('customer/index/');
        $this->data['window'] = element('window', $this->uri_assoc);
    }

    public function index()
    {
        $this->data['edit_url'] = admin_url("customer/edit/window/modal");
        $this->data['page_title'] = $this->data['module']['module_plural_label'];

        $option = array(
            'per_page' => $this->data['limit'],
            'url' => admin_url('customer/grid/') . query_string(),
            'width' => '2000',
            'col_sort_params' => "'','CONTACT_PERSON','EMAIL','COMPANY_NAME','ADDRESS','TELEPHONE','FAX',
                'MOBILE','PRODUCT_KEY','INSERT_DATE','HOSTING_INFO','SETUP_DATE'",
            'col_widths' => "'100px','9%','9%','9%','9%','9%','9%','9%','9%','9%','30%','9%'",
            'unsortable_cols' => "",
            'id' => 'customerGrid',
            'data_type' => 'json'
        );
        $grid_script = js_grid($option);

        $this->template->view_parts('content', 'customer/index_view', $this->data)
                ->title('customer')
                ->script($grid_script)
                ->build();
    }

    public function grid()
    {
        $extra = array(
            'limit' => $this->data['limit']
        );
        add_language_param($extra);
        $this->customer_model->set_extra_from_url($extra);

        $this->data['rows'] = $this->customer_model->get_rows($extra);
        $json['html'] = $this->template->build('customer/grid_view', $this->data, TRUE);

        unset($extra['limit'], $extra['offset'], $extra['callback']);
        $json['total'] = $this->customer_model->get_count($extra);

        echo $this->fastjson->encode($json);
    }

    public function delete()
    {
        $json['error'] = 'no';
        use_try_catch();
        try
        {
            $this->db->trans_start();
            $this->customer_model->delete($this->id);

            # if there is an error in database processes
            if($this->db->trans_status() === FALSE)
            {
                throw new Exception(__('Unknown error was occured'));
            }

            #end transaction, has error it will be rollback
            $this->db->trans_complete();
        }
        catch (Exception $exc)
        {
            $this->db->trans_rollback();

            $json['error'] = 'yes';
            $json['error'] = $exc->getMessage();
        }

        $this->output->_display($this->fastjson->encode($json));
    }

    /*
      private function _upload_image($id='', $image_name='')
      {
      $image_id = 0;
      if(!$id || !array_key_exists('image', $_FILES) || $_FILES['image']['error'] == '4')
      {
      return $image_id;
      }

      $this->file->init(array(
      'upload_dir_name' => 'customer',
      'overwrite' => FALSE
      ));

      if($this->file->upload_file('image', $image_name))
      {
      $db_data = array('file_title' => $image_name);
      $image_id = $this->file->insert($db_data);
      $this->customer_model->update($id, array('image_id' => $image_id));
      }
      else
      {
      throw new Exception(implode('<br/>', $this->file->errors));
      }

      $this->file->clear();
      return $image_id;
      }
     */
    public function edit()
    {
        $this->_set_form_data();

        $json['error'] = 'no';
        if($this->_form_validation() === TRUE)
        {
            $db_data = array(
                'CONTACT_PERSON' => $this->input->post('contact_person', TRUE),
                'EMAIL' => $this->input->post('email', TRUE),
                'COMPANY_NAME' => $this->input->post('company_name', TRUE),
                'ADDRESS' => $this->input->post('address', TRUE),
                'TELEPHONE' => $this->input->post('telephone', TRUE),
                'FAX' => $this->input->post('fax', TRUE),
                'MOBILE' => $this->input->post('mobile', TRUE),
                'PRODUCT_KEY' => $this->input->post('product_key', TRUE),
                'INSERT_DATE' => mysql_now(),
                'HOSTING_INFO' => $this->input->post('hosting_info', TRUE),
                'SETUP_DATE' => $this->input->post('setup_date', TRUE),
            );

            use_try_catch();
            try
            {
                $this->db->trans_start();

                if(!$db_data['PRODUCT_KEY'])
                {
                    $db_data['PRODUCT_KEY'] = random_string('unique', 10);
                }
                
                add_language_param($db_data);
                if(empty($this->id))
                {
                    $this->id = $this->customer_model->insert($db_data);
                    $this->uri_assoc['id'] = $this->id;
                }
                else
                {
                    unset($db_data['INSERT_DATE']);
                    $this->customer_model->update($this->id, $db_data);
                }

                # if there is an error in database processes
                if($this->db->trans_status() === FALSE)
                {
                    throw new Exception(__('Unknown error was occured'));
                }

                #end transaction, has error it will be rollback
                $this->db->trans_complete();

                if($this->data['window'] == 'modal')
                {
                    js_close_modal('customerModal');
                }
                elseif(is_ajax())
                {
                    exit;
                }
                else
                {
                    $this->session->set_flashdata('success', __('process is performed successfully'));
                    redirect(admin_url($this->uri->assoc_to_uri($this->uri_assoc)));
                }
            }
            catch (Exception $exc)
            {
                $this->db->trans_rollback();

                $this->data['error'] = "File : {$exc->getFile()}<br/>";
                $this->data['error'] .= "Line : {$exc->getLine()}<br/>";
                $this->data['error'] .= "Message : {$exc->getMessage()}<br/>";
                if(is_ajax())
                {
                    $json['error'] = 'yes';
                    $json['message'] = $this->data['error'];
                    $this->output->_display($this->fastjson->encode($json));
                    exit;
                }

                $this->session->set_flashdata('error', $this->data['error']);
                redirect(admin_url($this->uri->assoc_to_uri($this->uri_assoc)));
            }

            if(is_ajax())
            {
                $this->output->_display($this->fastjson->encode($json));
                exit;
            }
        }
        $this->data['row'] = $this->customer_model->get_row_by_id($this->id, array());
        load_jquery_ui_timepicker();
        load_tinymce();
        js_init_tinymce();
        $this->template->view_parts('content', 'customer/form_view', $this->data)
                ->title($this->data['page_title'])
                ->build();
    }

    private function _set_form_data()
    {
        $this->data['page_title'] = $this->data['module']['module_single_label'] . ' ' . __('New/Edit');

        $this->data['form_action'] = current_url();
        $this->data['redirect'] = current_url();
    }

    private function _form_validation()
    {
        if(!$_POST) return FALSE;

        $this->load->library('form_validation');
        $validation = array(
            array(
                'field' => 'contact_person',
                'label' => 'Contact Person',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'email',
                'label' => 'Email',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'company_name',
                'label' => 'Company Name',
                'rules' => 'trim'
            ),
            array(
                'field' => 'address',
                'label' => 'Address',
                'rules' => 'trim'
            ),
            array(
                'field' => 'telephone',
                'label' => 'Telephone',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'fax',
                'label' => 'Fax',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'mobile',
                'label' => 'Mobile',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'product_key',
                'label' => 'Product Key',
                'rules' => 'trim|max_length[40]'
            ),
            array(
                'field' => 'insert_date',
                'label' => 'Insert Date',
                'rules' => 'trim'
            ),
            array(
                'field' => 'hosting_info',
                'label' => 'Hosting Info',
                'rules' => 'trim'
            ),
            array(
                'field' => 'setup_date',
                'label' => 'Setup Date',
                'rules' => 'trim'
            ),
        );

        $this->validation = array_merge($this->validation, $validation);
        $this->form_validation->set_rules($this->validation);

        if($this->form_validation->run() === FALSE)
        {
            return FALSE;
        }

        return TRUE;
    }

}

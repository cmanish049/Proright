<?php
if(!defined('BASEPATH')) exit('No direct script access allowed');

function js_close_modal($modal_name = 'dialog')
{
    $script = '';
    if($_POST)
    {
        $script = "if(window.parent.dialogs['$modal_name'] != undefined) { 
            window.parent.dialogs['$modal_name'].close();
            window.parent.dialogs['$modal_name'].destroy();
        }";
    }
    echo "<script type='text/javascript'>$script</script>";
    exit;
}

function js_init_tinymce($config = array())
{
    $CI = & get_instance();
    $tema = $CI->template->get_theme();
    $tema_url = trim_slashes(base_url(config_item('themes_folder') . "/$tema"));

    $_config = array(
        'selector' => 'textarea.js-editor',
        'onchange_callback' => '',
        //'plugins' => ',lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave',
        'plugins' => 'myplugin,autolink,lists,spellchecker,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template',
        //'plugins' => ',lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave',
        //'plugins' => 'autolink,pagebreak,style,advlink,preview,paste,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras',
        'theme_advanced_buttons1' => 'myplugin,save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect',
        'theme_advanced_buttons2' => 'cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor',
        'theme_advanced_buttons3' => 'tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen',
        'theme_advanced_buttons4' => 'insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft'
    );

    $_config = array_merge($_config, $config);

    $script = "
    $(function(){
        $('{$_config['selector']}').tinymce({
            script_url :  '{$tema_url}/js/tiny_mce/tiny_mce.js',
            document_base_url : '" . base_url() . "',
            //content_css : false,
            theme : 'advanced',
            plugins : '{$_config['plugins']}',
            height : '300',
            width:'92%',
			//language : 'tr',
            theme_advanced_buttons1 : '{$_config['theme_advanced_buttons1']}',
            theme_advanced_buttons2 :'{$_config['theme_advanced_buttons2']}',
            theme_advanced_buttons3 :'{$_config['theme_advanced_buttons3']}',
            theme_advanced_buttons4 :'{$_config['theme_advanced_buttons4']}',
            theme_advanced_toolbar_location : 'top',
            theme_advanced_toolbar_align : 'left',
            theme_advanced_statusbar_location : 'bottom',
            theme_advanced_resizing : true,
            paste_auto_cleanup_on_paste : true,
            paste_remove_styles: false,
            paste_remove_styles_if_webkit: false,
            paste_strip_class_attributes: true,
            remove_script_host : false,
            relative_urls : true,
            //encoding : 'xml',
            //apply_source_formatting : false,
            entity_encoding: 'raw',
            //entities : '160,nbsp,38,amp,34,quot,162,cent,8364,euro,163,pound,165,yen,169,copy,174,reg,8482,trade,8240,permil,60,lt,62,gt,8804,le,8805,ge,176,deg,8722,minus',
            onchange_callback : '{$_config['onchange_callback']}',
            paste_retain_style_properties : 'margin, padding, width, height, font-size, font-weight, font-family, color, text-align, ul, ol, li, text-decoration, border, background, float, display'
        });
    });
    ";

    $CI->template->script($script);
}

function js_bind_alert_closing_window()
{
    $script = '$(function(){bindAlertClosingWindow();});';
    return $script;
}

function js_unbind_alert_closing_window($selector, $event = 'submit')
{
    $script = "$(function(){unbindAlertClosingWindow('$selector','$event');});";
    return $script;
}

function js_autosave($selector, $target = '')
{
    $script = '$(function(){setTimeout("autosave(' . "'$selector','$target')\", 20000);});";

    return $script;
}

function html_autocomplete_cleaner_button($selector = '', $target = '')
{
    $html = '<a href="#" class="clean-autocomplete" onclick="clean_autocomplete(' . "'$selector','$target'" . '); return false;"><i class="icon-remove"></i></a>';
    return $html;
}

function js_autocomplete($selector = '', $url = '', $target = '', $params = '', $multiple = 'false')
{
    $result = '';
    $focus = '';
    if(!empty($target))
    {
        $result = "
            element = $('$target');
            if (element.is('input')) {
                element.val(item.value);
            }
            else{
                element.html(item.value);
            }
        ";
    }
    $script = "
        $(function(){
            $('" . $selector . "').autocomplete('" . $url . "', {
                multiple: " . $multiple . ",
                extraParams: {" . $params . "},
                dataType: 'json',
                autoFill: true,
                parse: function(data) {
                    return $.map(data, function(row) {
                        return {
                            data: row,
                            value: row.value,
                            result: row.text
                        }
                    });
                },
                formatItem: function(item) {
                    return item.text;
                }
            }).result(function(e, item) {
                $result
            });
        });
    ";
    return $script;
}

function js_grid($options = array())
{
    //$selector = (isset($options['selector'])) ? $options['selector'] : '.table';

    $url = $options['url'];
    $params = (isset($options['params'])) ? $options['params'] : '';

    $col_sort_params = isset($options['col_sort_params']) ? $options['col_sort_params'] : '';
    $col_widths = (isset($options['col_widths'])) ? $options['col_widths'] : '';
    $unsortable_cols = (isset($options['unsortable_cols'])) ? $options['unsortable_cols'] : '';

    $height = isset($options['height']) ? $options['height'] : "'auto'";

    $total = isset($options['total']) ? $options['total'] : '0';
    $per_page = isset($options['per_page']) ? $options['per_page'] : '';
    $grid_name = isset($options['id']) ? $options['id'] : '';

    $selector = "#$grid_name";
    $row_classes = isset($options['row_classes']) ? $options['row_classes'] : "'odd','even'";

    $height = isset($options['height']) ? $options['height'] : '200';
    $width = isset($options['width']) ? $options['width'] : '940';

    $data_type = isset($options['data_type']) ? $options['data_type'] : 'html';

    //onLoadComplete
    $onLoadComplete = isset($options['onLoadComplete']) ? $options['onLoadComplete'] : 'function(){
        var trLength = ' . $grid_name . '.g.find("tr:has(td)").length;
        ' . $grid_name . '.g.find(".btn-group").slice(trLength-3,trLength).addClass("dropup");
    }';
    $script = "
        var $grid_name;
        $(function(){
            $grid_name = $('" . $selector . "').ingrid({
                height: '$height',
                width : '$width',
                url: '" . $url . "',
                type: 'GET',
                dataType: '$data_type',
                extraParams: {" . $params . "},
                loadingClass: 'grid-loading',
                loadingHtml: '<div>&nbsp;</div>',

                height: " . $height . ",
                savedStateLoad: false, //Cookieden son değerleri çeker
                initialLoad: true, //true olursa ajax ile sayfa açıldığında kayıtları getirir.

                colWidths: [" . $col_widths . "],
                headerHeight: 32,

                headerClass: 'grid-header-bg',
                gridClass: 'datagrid',
                rowClasses: [" . $row_classes . "],
                colClasses: [],
                rowHoverClass: 'grid-row-hover',
                rowSelectedClass: 'grid-row-sel',

                onRowSelect: function(tr, selected){},
                onLoadStart: function(){},
                onLoadSuccess: function(){},
                onLoadComplete: $onLoadComplete,

                colSortParams: [" . $col_sort_params . "],
                sortAscClass: 'grid-sort-asc',
                sortDescClass: 'grid-sort-desc',
                sortNoneClass: 'grid-sort-none',
                unsortableCols: [" . $unsortable_cols . "],

                pageChanged: function(p){},

                totalRecords: " . $total . ",
                recordsPerPage: " . $per_page . ",
                resizableCols: false,
                paging: true,
                sorting: true
            });
        });
    ";

    return $script;
}

function kendouiDataItemTemplateString($item_name='')
{
    return "#= isnull($item_name, '') #";
}

function kendouiDataItemDateTemplateString($item_name='')
{
    return "#= kendo.toString(isnull($item_name, ''),'yyyy-MM-dd hh:mm:ss') #";
}

function kendouiDataItemDateTimeTemplateString($item_name='')
{
    return "#= isnull($item_name, '') #";
}
<?php

class User extends Admin_Controller
{
    public function __construct()
    {
        parent::__construct();

        $module = 'user';
        $this->auth->is_authorized($module);
        //$this->load->model(array('country_model','school_model','city_model'));

        $this->data['limit'] = 10;
        $this->data['module'] = $this->auth->get_module($module);
        $this->data['page_title'] = $this->data['module']['module_plural_label'];
        $this->data['index_url'] = admin_url('user/index/');
        $this->data['window'] = element('window', $this->uri_assoc);
    }

    public function index()
    {
        $this->data['edit_url'] = admin_url("user/edit/window/modal");
        $this->data['page_title'] = $this->data['module']['module_plural_label'];

        $option = array(
            'per_page' => $this->data['limit'],
            'url' => admin_url('user/grid/') . query_string(),
            'width' => '3000',
            'col_sort_params' => "'','UNIQUE_KEY','CREATOR_ID','IMAGE_ID','USER_TYPE','ACTIVE','USERNAME','PASSWORD','EMAIL','ABOUT','WEBSITE','DISPLAY_NAME','LAST_LOGIN','INSERT_DATE','GENDER','FIRST_NAME','FULL_NAME','LAST_NAME','TELEPHONE','MOBILE','ADDRESS','SCHOOL_ID','COUNTRY_ID','BIRTH_DATE','BIRTH_PLACE','APPELATION_ID','JOB_ID','META_DATA','CITY_ID','DISTRICT','ZIP_CODE','IS_ADMIN'",
            'col_widths' => "'100px','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%','3%'",
            'unsortable_cols' => "",
            'id' => 'userGrid',
            'data_type' => 'json'
        );
        $grid_script = js_grid($option);

        $this->template->view_parts('content', 'user/index_view', $this->data)
                ->title('user')
                ->script($grid_script)
                ->build();
    }

    public function grid()
    {
        $extra = array(
            'limit' => $this->data['limit']
        );
        add_language_param($extra);
        $this->user_model->set_extra_from_url($extra);

        $this->data['rows'] = $this->user_model->get_rows($extra);
        $json['html'] = $this->template->build('user/grid_view', $this->data, TRUE);

        unset($extra['limit'], $extra['offset'], $extra['callback']);
        $json['total'] = $this->user_model->get_count($extra);

        echo $this->fastjson->encode($json);
    }

    public function delete()
    {
        $json['error'] = 'no';
        use_try_catch();
        try
        {
            $this->db->trans_start();
            $this->user_model->delete($this->id);

            # if there is an error in database processes
            if($this->db->trans_status() === FALSE)
            {
                throw new Exception(__('Unknown error was occured'));
            }

            #end transaction, has error it will be rollback
            $this->db->trans_complete();
        }
        catch (Exception $exc)
        {
            $this->db->trans_rollback();

            $json['error'] = 'yes';
            $json['error'] = $exc->getMessage();
        }

        $this->output->_display($this->fastjson->encode($json));
    }

    /*
      private function _upload_image($id='', $image_name='')
      {
      $image_id = 0;
      if(!$id || !array_key_exists('image', $_FILES) || $_FILES['image']['error'] == '4')
      {
      return $image_id;
      }

      $this->file->init(array(
      'upload_dir_name' => 'user',
      'overwrite' => FALSE
      ));

      if($this->file->upload_file('image', $image_name))
      {
      $db_data = array('file_title' => $image_name);
      $image_id = $this->file->insert($db_data);
      $this->user_model->update($id, array('image_id' => $image_id));
      }
      else
      {
      throw new Exception(implode('<br/>', $this->file->errors));
      }

      $this->file->clear();
      return $image_id;
      }
     */
    public function edit()
    {
        $this->_set_form_data();

        $json['error'] = 'no';
        if($this->_form_validation() === TRUE)
        {
            $db_data = array(
                'UNIQUE_KEY' => $this->input->post('unique_key', TRUE),
                'CREATOR_ID' => $this->input->post('creator_id', TRUE),
                'IMAGE_ID' => $this->input->post('image_id', TRUE),
                'USER_TYPE' => $this->input->post('user_type', TRUE),
                'ACTIVE' => $this->input->post('active', TRUE),
                'USERNAME' => $this->input->post('username', TRUE),
                'PASSWORD' => $this->input->post('password', TRUE),
                'EMAIL' => $this->input->post('email', TRUE),
                'ABOUT' => $this->input->post('about', TRUE),
                'WEBSITE' => $this->input->post('website', TRUE),
                'DISPLAY_NAME' => $this->input->post('display_name', TRUE),
                'LAST_LOGIN' => $this->input->post('last_login', TRUE),
                'INSERT_DATE' => $this->input->post('insert_date', TRUE),
                'GENDER' => $this->input->post('gender', TRUE),
                'FIRST_NAME' => $this->input->post('first_name', TRUE),
                'FULL_NAME' => $this->input->post('full_name', TRUE),
                'LAST_NAME' => $this->input->post('last_name', TRUE),
                'TELEPHONE' => $this->input->post('telephone', TRUE),
                'MOBILE' => $this->input->post('mobile', TRUE),
                'ADDRESS' => $this->input->post('address', TRUE),
                'SCHOOL_ID' => $this->input->post('school_id', TRUE),
                'COUNTRY_ID' => $this->input->post('country_id', TRUE),
                'BIRTH_DATE' => $this->input->post('birth_date', TRUE),
                'BIRTH_PLACE' => $this->input->post('birth_place', TRUE),
                'APPELATION_ID' => $this->input->post('appelation_id', TRUE),
                'JOB_ID' => $this->input->post('job_id', TRUE),
                'META_DATA' => $this->input->post('meta_data', TRUE),
                'CITY_ID' => $this->input->post('city_id', TRUE),
                'DISTRICT' => $this->input->post('district', TRUE),
                'ZIP_CODE' => $this->input->post('zip_code', TRUE),
                'IS_ADMIN' => $this->input->post('is_admin', TRUE),
            );

            use_try_catch();
            try
            {
                $this->db->trans_start();

                if($db_data['PASSWORD'])
                {
                    $db_data['PASSWORD'] = $this->auth->encrypt_password($db_data['PASSWORD']);
                }
                else
                {
                    unset($db_data['PASSWORD']);
                }
                
                add_language_param($db_data);
                if(empty($this->id))
                {
                    $this->id = $this->user_model->insert($db_data);
                    $this->uri_assoc['id'] = $this->id;
                }
                else
                {
                    $this->user_model->update($this->id, $db_data);
                }

                # if there is an error in database processes
                if($this->db->trans_status() === FALSE)
                {
                    throw new Exception(__('Unknown error was occured'));
                }

                #end transaction, has error it will be rollback
                $this->db->trans_complete();

                if($this->data['window'] == 'modal')
                {
                    js_close_modal('userModal');
                }
                elseif(is_ajax())
                {
                    exit;
                }
                else
                {
                    $this->session->set_flashdata('success', __('process is performed successfully'));
                    redirect(admin_url($this->uri->assoc_to_uri($this->uri_assoc)));
                }
            }
            catch (Exception $exc)
            {
                $this->db->trans_rollback();

                $this->data['error'] = "File : {$exc->getFile()}<br/>";
                $this->data['error'] .= "Line : {$exc->getLine()}<br/>";
                $this->data['error'] .= "Message : {$exc->getMessage()}<br/>";
                if(is_ajax())
                {
                    $json['error'] = 'yes';
                    $json['message'] = $this->data['error'];
                    $this->output->_display($this->fastjson->encode($json));
                    exit;
                }

                $this->session->set_flashdata('error', $this->data['error']);
                redirect(admin_url($this->uri->assoc_to_uri($this->uri_assoc)));
            }

            if(is_ajax())
            {
                $this->output->_display($this->fastjson->encode($json));
                exit;
            }
        }
        $this->data['row'] = $this->user_model->get_row_by_id($this->id, array());


        $this->template->view_parts('content', 'user/form_view', $this->data)
                ->title($this->data['page_title'])
                ->build();
    }

    private function _set_form_data()
    {
        $this->data['page_title'] = $this->data['module']['module_single_label'] . ' ' . __('New/Edit');

        $this->data['form_action'] = current_url();
        $this->data['redirect'] = current_url();
        
        /*
        $this->data['dropdown_country_id'] = $this->country_model->dropdown('COUNTRY_ID','COUNTRY_NAME');
        $this->data['dropdown_city_id'] = $this->city_model->dropdown('CITY_ID','CITY_NAME');
        $this->data['dropdown_school_id'] = $this->school_model->dropdown('SCHOOL_ID','SCHOOL_NAME');
        */
    }

    private function _form_validation()
    {
        if(!$_POST) return FALSE;

        $this->load->library('form_validation');
        $validation = array(
            array(
                'field' => 'unique_key',
                'label' => 'Unique Key',
                'rules' => 'trim|max_length[20]'
            ),
            array(
                'field' => 'creator_id',
                'label' => 'Creator Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'image_id',
                'label' => 'Image Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'user_type',
                'label' => 'User Type',
                'rules' => 'trim|max_length[20]|required'
            ),
            array(
                'field' => 'active',
                'label' => 'Active',
                'rules' => 'trim|required'
            ),
            array(
                'field' => 'username',
                'label' => 'Username',
                'rules' => 'trim|max_length[20]'
            ),
            array(
                'field' => 'password',
                'label' => 'Password',
                'rules' => 'trim|max_length[40]'
            ),
            array(
                'field' => 'email',
                'label' => 'Email',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'about',
                'label' => 'About',
                'rules' => 'trim'
            ),
            array(
                'field' => 'website',
                'label' => 'Website',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'display_name',
                'label' => 'Display Name',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'last_login',
                'label' => 'Last Login',
                'rules' => 'trim'
            ),
            array(
                'field' => 'insert_date',
                'label' => 'Insert Date',
                'rules' => 'trim'
            ),
            array(
                'field' => 'gender',
                'label' => 'Gender',
                'rules' => 'trim|max_length[20]'
            ),
            array(
                'field' => 'first_name',
                'label' => 'First Name',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'full_name',
                'label' => 'Full Name',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'last_name',
                'label' => 'Last Name',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'telephone',
                'label' => 'Telephone',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'mobile',
                'label' => 'Mobile',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'address',
                'label' => 'Address',
                'rules' => 'trim'
            ),
            array(
                'field' => 'school_id',
                'label' => 'School Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'country_id',
                'label' => 'Country Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'birth_date',
                'label' => 'Birth Date',
                'rules' => 'trim'
            ),
            array(
                'field' => 'birth_place',
                'label' => 'Birth Place',
                'rules' => 'trim|max_length[255]'
            ),
            array(
                'field' => 'appelation_id',
                'label' => 'Appelation Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'job_id',
                'label' => 'Job Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'meta_data',
                'label' => 'Meta Data',
                'rules' => 'trim'
            ),
            array(
                'field' => 'city_id',
                'label' => 'City Id',
                'rules' => 'trim|numeric'
            ),
            array(
                'field' => 'district',
                'label' => 'District',
                'rules' => 'trim|max_length[200]'
            ),
            array(
                'field' => 'zip_code',
                'label' => 'Zip Code',
                'rules' => 'trim|max_length[100]'
            ),
            array(
                'field' => 'is_admin',
                'label' => 'Is Admin',
                'rules' => 'trim|required'
            ),
        );

        $this->validation = array_merge($this->validation, $validation);
        $this->form_validation->set_rules($this->validation);

        if($this->form_validation->run() === FALSE)
        {
            return FALSE;
        }

        return TRUE;
    }

}

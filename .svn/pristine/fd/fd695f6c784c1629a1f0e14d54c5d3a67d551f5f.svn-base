<?php

/**
 * Yazar      : Serkan Dağlıoğlu
 * E-posta    : serkandaglioglu@gmail.com
 * Web adresi : http://www.serkandaglioglu.com
 * 
 * Dökümantasyon adresi : http://www.serkandaglioglu.com/codeigniter-my_model-sinifi
 * Son güncelleme : 24 Kasım 2011
 */
class MY_Model extends CI_Model
{
    public $table = '';
    public $auto_increment = '';
    public $table_columns = array();
    public $select = array();
    public $where_rules = array();
    public $as = 'X';
    public $search_fields = array();
    public $join_select = array();
    public $select_all = TRUE;

    public static $table_name_toupper = FALSE;
    public static $column_name_toupper = TRUE; 

    public function __construct($table = '', $auto_increment = '')
    {
        parent::__construct();

        if(!$table)
        {
            return;
        }

        $this->load->config('db_tables');

        $this->set_table($table);
        $this->set_auto_increment($auto_increment);
        $this->set_table_columns();
    }

    private function _reset_variables()
    {
        $this->select = array();
    }

    private function _has_one_column(&$object)
    {
        if(!is_object($object) && empty($object))
        {
            return FALSE;
        }
        
        $count = 0;
        foreach($object as $e)
        {
            if($count>1)
            {
                break;
            }
            $count++;
        }
        
        return $count==1;
    }
    
    public function call_before_extra_select()
    {
        
    }

    /**
     * id ile tek satırlık kayıt çeker
     */
    public function get_row_by_id($id, $extra = array())
    {
        $this->_extra($extra);
        $this->_extra_select($extra);
        $this->_extra_where($extra);
        $this->order_by($extra);
        $this->call_before_extra_select($extra);

        $object = $this->db->where($this->as . '.' . $this->auto_increment, $this->clean_id($id))
                ->limit(1)
                ->get("$this->table $this->as");

        $row = $object->row();
        $object->free_result();
        unset($object);

        $row = object_change_key_case($row);
        
        #Eğer bir tek alan istenmişse o alanın değerini dönderiyoruz
        if($this->_has_one_column($row))
        {
            $data = '';
            foreach($row as $e)
            {
                $data = $e;
                break;
            } 
            $row = $data;
        }

        $this->_reset_variables();
        return $row;
    }

    /**
     * örneğin WHERE -yazi_seo='yazi-seo-deger' şeklinde sorgu 
     * sonucunda tek satırlık kayıt çeker
     * 
     * @param type $where
     * @return type 
     */
    public function get_row_where($extra = array())
    {
        $this->_extra($extra);
        $this->_extra_select($extra);
        $this->_extra_where($extra);
        $this->order_by($extra);
        $this->call_before_extra_select($extra);

        $object = $this->db->limit(1)->get("$this->table $this->as");

        $row = $object->row();
        $object->free_result();
        unset($object);

        $row = object_change_key_case($row);
        
        #Eğer bir tek alan istenmişse o alanın değerini dönderiyoruz
        if($this->_has_one_column($row))
        {
            $data = '';
            foreach($row as $e)
            {
                $data = $e;
                break;
            } 
            $row = $data;
        }

        $this->_reset_variables();
        return $row;
    }

    /**
     * Birden fazla kayıt çeker
     * 
     * @param type $extra 
     */
    public function get_rows($extra = array())
    {
        $this->_extra($extra);
        $this->_extra_select($extra);
        $this->_extra_where($extra);
        $this->order_by($extra);
        $this->call_before_extra_select($extra);

        $object = $this->db->get("$this->table $this->as");
        
        if(isset($extra['result_array']) && $extra['result_array']==TRUE)
        {
            $rows = $object->result_array();
        }
        else
        {
            $rows = $object->result();
        }
        
        $object->free_result();
        unset($object);

        $rows = object_change_key_case($rows);
        /**
         * Eğer tek alan istenmişse tek boyutlu dizi haline getiriyoruz
         * 
         * Örneğin sonuc array([0]=>array('baslik'=>'başlık 1'),[1]=>array('baslik'=>'başlık 2')) dönmesi gerekiyorken
         * biz array('başlık 1','başlık 2') döndereceğiz
         */
        $object = (isset($rows[0]))?$rows[0]:NULL;
        if($this->_has_one_column($object))
        {
            $data = array();
            foreach($rows as $row)
            {
                foreach($row as $e)
                {
                    $data[] = $e;
                    break;
                }                    
            }
            $rows = $data;
        }

        $this->_reset_variables();
        return $rows;
    }

    /**
     * Veritabanındaki kayıt sayısını çeker.
     * 
     * @param type $where 
     */
    public function get_count($extra = array())
    {
        $this->_extra($extra);
        $this->_extra_where($extra);

        $object = $this->db->select('COUNT(*) AS c')->get("$this->table $this->as");
        $adet = $object->row()->c;

        $object->free_result();
        unset($object);

        $this->_reset_variables();
        return $adet;
    }

    /**
     * Codeigniterin form_helper fonksiyonu olan form_dropdown() fonksiyonuna gönderilecek
     * kayıtları çeker
     * 
     * @param type $value_field
     * @param type $text_field
     * @param type $extra 
     */
    public function dropdown($value_field = '', $text_field = '', $extra = array(), $first_value = '', $first_text = '')
    {
        $first_text OR $first_text = '';
        
        if(!$value_field) $value_field = $this->auto_increment;
        if(!$text_field) $text_field = $value_field;

        $this->select[] = "$value_field, $text_field";
        
        if(!isset($extra['order_by']) && $this->is_column_exist($text_field))
        {
            $extra['order_by'] = "$text_field ASC";
        }
        
        $this->_extra($extra);
        $this->_extra_select($extra);
        $this->_extra_where($extra);
        $this->order_by($extra);
        $this->call_before_extra_select($extra);

        $query = $this->db->get("$this->table $this->as");        
        $rows = object_change_key_case($query->result());
                
        //$options = array();
        $options = array($first_value => $first_text);
        $options = array($first_value => $first_text);
        foreach($rows as $row)
        {
            $options[$row->{strtolower($value_field)}] = $row->{strtolower($text_field)};
        }

        $query->free_result();
        $this->_reset_variables();

        return $options;
    }
    
    /**
     * Veritabanına kayıt ekler
     * 
     * @param type $data 
     */
    public function insert($data = array())
    {
        $query = $this->db->insert($this->table, $this->prepare_data($data));

        if($query)
        {
            if($this->auto_increment != '')
            {
                return $this->db->insert_id();
            }
            else
            {
                return TRUE;
            }
        }

        return FALSE;
    }

    /**
     * Veritabanındaki kayıdı id değerine göre düzenler    
     * 
     * @param type $id
     * @param type $data
     * @param type $extra 
     */
    public function update($id, $data = array())
    {
        if(is_array($id))
        {
            $this->db->where_in($this->auto_increment, $this->clean_id($id));
        }
        else
        {
            $this->db->where($this->auto_increment, $this->clean_id($id));
        }

        $this->db->set($this->prepare_data($data))->update($this->table);
        return $this->db->affected_rows();
    }

    /**
     * Veritabanındaki kayıdı where koşulu ekleyerek düzenler
     * 
     * @param type $where
     * @param type $data 
     */
    public function update_where($where = array(), $data = array())
    {        
        $this->db->where($this->prepare_data($where));
        $this->db->set($this->prepare_data($data))->update($this->table);
        return $this->db->affected_rows();
    }

    /**
     * Veritabanındaki id değeri ile eşleşen kaydı siler
     * 
     * @param type $id 
     */
    public function delete($id, $extra = array())
    {
        if(is_array($id))
        {
            $this->db->where_in($this->auto_increment, $this->clean_id($id));
        }
        else
        {
            $this->db->where($this->auto_increment, $this->clean_id($id));
        }

        if(!empty($extra))
        {
            $extra = $this->prepare_data($extra);
            $this->db->where($extra);
        }

        $this->db->delete($this->table);
        return $this->db->affected_rows();
    }

    /**
     * Veritabanındaki kayıdı where koşulu ekleyerek siler
     * 
     * @param type $where 
     */
    public function delete_where($where = array())
    {
        $where = $this->prepare_data($where);
        $this->db->where($where)->delete($this->table);
        return $this->db->affected_rows();
    }

    /**
     * Yukarıda select sorguları yapan fonksiyonlar kendilerine gelen $extra parametrelerini bu
     * fonksiyona gönderirler.     
     *  
     * @param type $extra 
     */
    protected function _extra(&$extra = array())
    {
        if(empty($extra)) return;

        if(isset($extra['callback']))
        {
            if(is_array($extra['callback']))
            {
                foreach($extra['callback'] as $key => $e)
                {
                    $callback = 'callback_' . $e;
                    if(method_exists($this, $callback))
                    {
                        $this->$callback($extra);
                    }
                }
            }
            else if(is_string($extra['callback']))
            {
                $callback = 'callback_' . $extra['callback'];
                if(method_exists($this, $callback))
                {
                    $this->$callback($extra);
                }
            }
        }
        unset($extra['callback']);

        #limit
        if(isset($extra['limit']))
        {
            if(isset($extra['offset']))
            {
                $this->limit($this->clean_id($extra['limit']), $this->clean_id($extra['offset']));
                unset($extra['offset']);
            }
            else
            {
                $this->limit($this->clean_id($extra['limit']));
            }
            unset($extra['limit']);
        }
    }

    /**
     * Örneğin select sorgusunda seçilecek alanları belirlemek istersek şöyle bir dizi göndermeliyiz
     * $extra = array('select'=>'column1,column2,column4')
     * 
     * @param type $extra 
     */
    private function _extra_select(&$extra)
    {        
        if(isset($extra['distinct']) && $extra['distinct'] === TRUE)
        {
            $this->db->distinct();
            unset($extra['distinct']);
        }
        
        if(isset($extra['select']))
        {
            if($extra['select']===FALSE)
            {
                return;
            }
            
            $this->select = array();
            $this->select[] = $extra['select'];
            unset($extra['select']);
        }
        
        if(empty($this->select))
        {
            $this->select[] = $this->as . '.*';
        }

        $select_string = implode(',', $this->select);
        $select_array = explode(',', $select_string);

        if(empty($select_array)) return;

        foreach($select_array as $key => $e)
        {
            $column = self::column_name(trim($e));
            if(strpos($e, '.') === FALSE && in_array($column, $this->table_columns))
            {
                $select_array[$key] = $this->as . '.' . $column;
            }
            
        }
        unset($e);

        $this->select = $select_array;
        $this->db->select($this->select);
        
        //join selects
        $select_string = implode(',', $this->join_select);
        $select_array = explode(',', $select_string);
        foreach($select_array as $key => $e)
        {
            $column = self::column_name(trim($e));
            $select_array[$key] = $column;
        }
        $this->join_select = $select_array;
        $this->db->select($this->join_select);

        unset($select_array);
        return $this;
    }

    protected function _extra_where(&$extra = array())
    {
        if(!isset($extra) || empty($extra)) return;
        $this->_set_where_rules();

        foreach($extra as $key => $e)
        {
            $rule = strtolower(trim($key));
            if(isset($this->where_rules[$rule]))
            {
                $where_rule = $this->where_rules[$rule];
                $column = $where_rule['column'];
                $function = $where_rule['function'];

                if(array_key_exists($column, $this->search_fields))
                {
                    $column = $this->search_fields[$column];
                }
                elseif(strpos($column, '.') === FALSE)
                {
                    $column = $this->as . '.' . $column;
                }
                $this->db->{$function}($column, $e);
                unset($extra[$key]);
            }
            elseif(strpos($rule, ' ') !== FALSE)
            {
                $arr = explode(' ', trim($rule));
                $rule = $arr[0];
                
                //eğer tablo adı ve as ifadesindeki tablo ismi var mı?                
                if(isset($this->where_rules[$rule]))
                {
                    $where_rule = $this->where_rules[$rule];
                    $column = $where_rule['column'];
                    $function = $where_rule['function'];

                    if(array_key_exists($column, $this->search_fields))
                    {
                        $column = $this->search_fields[$column];
                    }
                    else
                    if(strpos($column, '.') === FALSE)
                    {
                        $column = $this->as . '.' . $column;
                    }
                    $column = $column . ' ' . $arr[1];

                    $this->db->{$function}($column, $e);
                    unset($extra[$key]);
                }
            }
        }
    }

    private function _set_where_rules()
    {
        if(!empty($this->where_rules))
        {
            return;
        }

        $add_last_array = array(
            'where' => '',
            'where_in' => '__in',
            'or_where_in' => '__or_in',
            'where_not_in' => '__not_in',
            'or_where_not_in' => '__or_not_in',
            'or_where' => '__or',
            'like' => '__like',
            'or_like' => '__or_like',
            'not_like' => '__not_like',
            'or_not_like' => '__or_not_like'
        );

        $columns = array_merge($this->search_fields, $this->table_columns);
        $where_rules = array();
        foreach($columns as $column)
        {
            $column = strtolower($column);
            
            foreach($add_last_array as $function => $add_last)
            {
                $where_rules[$column . $add_last] = array('function' => $function, 'column' => self::column_name($column));
            }
        }
        unset($column);

        $this->where_rules = $where_rules;
    }

    public function limit($limit, $offset = 0)
    {
        $this->db->limit($this->clean_id($limit), $this->clean_id($offset));
        return $this;
    }

    
    /**
     * $order_by = array('order'=>'DESC','order_by'=>array('alan1 ASC','alan2') )
     * 
     * @param type $order_by
     * @param type $order
     * @return \MY_Model 
     */
    public function order_by($order_by = '', $order = 'ASC')
    {        
        if(is_array($order_by))
        {
            $_order_by = isset($order_by['order_by']) ? $order_by['order_by'] : '';
            $_order = isset($order_by['order']) ? $order_by['order'] : '';
        }

        if(empty($_order_by))
        {
            if($this->auto_increment)
            {
                $this->db->order_by($this->as . '.' . $this->auto_increment, 'DESC');
            }
            return $this;
        }

        if(!is_array($_order_by))
        {
            $_order_by = array($_order_by);
        }

        foreach($_order_by as $e)
        {
            $order_by = $e;
            $order = $_order;
            if(strpos($e,' ') !== FALSE)
            {
                $array = explode(' ', $e);
                $order_by = $array[0];
                $order = $array[1];
            }
                        
            if($this->is_column_exist($order_by))
            {
                if(strpos($order_by,'.') === FALSE)
                {
                    $order_by = $this->as . '.' . $order_by;
                }
            }
            else if(in_array($order_by, array_keys($this->search_fields)))
            {
                $order_by = $this->search_fields[$order_by];
            }
            else
            {                
                continue;
            }
            
            $order_by = self::column_name($order_by);
            $order = (in_array(strtoupper($order), array('ASC', 'DESC'))) ? $order : 'DESC';                                 
            $this->db->order_by($order_by, $order);
        }

        return $this;
    }

    public function set_extra_from_url(&$extra, $uri_assoc = array())
    {
        static $uri_params;

        $_extra = array(
            'limit' => 10,
            'offset' => 0,
            'callback' => array()
        );
        $extra = array_merge($_extra, $extra);
        if(empty($uri_params))
        {
            $CI = &get_instance();
            $post = $CI->input->post(NULL, TRUE);
            $get = $CI->input->get(NULL, TRUE);
            $uri_params = array_merge(($post) ? $post : array(), ($get) ? $get : array());
            $uri_params = array_merge($uri_params, $uri_assoc);
        }
        if(empty($uri_params))
        {
            return;
        }

        $this->set_extra_for_kendouGrid($extra,$uri_params);
    }
    public function add_extra_search_fields($search_fields = array())
    {
        $this->search_fields = array_merge($this->search_fields, $search_fields);        
    }
    public function set_extra_for_kendouGrid(&$extra,$params=array())
    {
        $default_uri_params = array('search', 'q', 'sort', 'dir', 'page', 'rand','skip','filter');

        if(isset($params['sort']))
        {
            $sort = $params['sort'];
            foreach($sort as $key => $e)
            {
                $dir = strtoupper($e['dir']);
                $field = $e['field'];
                
                $extra['order_by'][] = "$field $dir";
            }
        }
        
        if(isset($params['filter']))
        {
            $operators = array(
                'eq' => '',
                'neq' => ' <>',
                'contains' => '__like',
                'doesnotcontain' => '__not_like',
                'gte' => ' >=',
                'gt' => ' >',
                'lte' => ' <=',
                'lt' => ' <',
                'startswith' => 'after',
                'endswith' => 'before'
            );
            
            $filter = $params['filter'];
            $filters = isset($filter['filters'])&&is_array($filter['filters'])?$filter['filters']:array();
            foreach($filters as $e)
            {
                if(!isset($e['value']))
                {
                    continue;
                }
                $field = $e['field'];
                $value = $e['value'];
                $operator = $e['operator'];
                if(!array_key_exists($operator, $operators))
                {
                    continue;
                }
                
                if(array_key_exists($field, $this->search_fields))
                {
                    $field = $this->search_fields[$field];
                }
                
                if($operator=='startswith' || $operator=='endswith')
                {
                    $field = self::column_name($e['field']);
                    $this->db->like($field, $value, $operators[$operator]); 
                }
                else
                {
                    $extra["{$field}{$operators[$operator]}"] = $value;
                }
                
            }
        }
        
        if(isset($params['skip']))
        {
            $extra['offset'] = $this->clean_id($params['skip']);
        }
        
        if(isset($params['pageSize']))
        {
            $extra['limit'] = $this->clean_id($params['pageSize']);
        }

        if(isset($params['q']))
        {
            $extra['q'] = $params['q'];
            $extra['callback'][] = 'search';
        }
          
        /**
         * if param is column of this table add to eksra for sql where statement
         */
        foreach($params as $key => $e)
        {
            if(!isset($extra[$key]) && $this->is_column_exist($key))
            {
                $extra[$key] = $e;
            }
        }
    }

    public function set_table($table = '')
    {        
        $this->table = $table;
        
        if(self::$table_name_toupper)
        {
            $this->table = strtoupper($this->table);
        }
    }

    public function set_auto_increment($auto_increment = '')
    {
        $this->auto_increment = $auto_increment;
        $this->auto_increment = self::column_name($this->auto_increment);
    }

    protected function set_table_columns()
    {
        $this->table_columns = $this->config->item($this->table, 'db_tables');
        if(empty($this->table_columns))
        {
            $this->table_columns = $this->config->item(strtolower($this->table), 'db_tables');
        }
    }

    public static function column_name($column_name)
    {
        if(self::$column_name_toupper)
        {
            $column_name = strtoupper($column_name);
        }
        
        return $column_name;
    }
    
    public static function table_name($table_name)
    {
        if(self::$table_name_toupper)
        {
            $table_name = strtoupper($table_name);
        }
        
        return $table_name;
    }
    
    public function is_column_exist($column_name)
    {
        return in_array(self::column_name($column_name), $this->table_columns);
    }
    
    /**
     * İnsert ve Update işlemlerinde verileri hazılar
     * 
     * @param type $data 
     */
    protected function prepare_data($data = array())
    {
        if(empty($data))
        {
            return $data;
        }

        $_data = array();
        foreach($data as $key => $e)
        {
            $e = trim($e);                        
            $key = static::column_name($key);
            
            if($e=='')
            {
                $_data[$key] = NULL;
            }
            else
            {
                $_data[$key] = $e;
            }
        }

        return $_data;
    }

    /**
     * id değerini inte cast eder
     * @param type $id 
     */
    protected function clean_id($id)
    {
        if(!is_array($id))
        {
            $id = intval($id);
        }
        else
        {
            foreach($id as $key => $e)
            {
                $id[$key] = intval($e);
            }
        }

        return $id;
    }

}